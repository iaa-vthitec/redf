var _debug = false;
lmsAPI = null;
API = new Object;
bInitialized = false;
bFinish = false;
sdList = null;
sLastError = '0';
sStorageKeyName = 'scormData';
ADL.XAPIWrapper.Agent = new ADL.XAPIStatement.Agent('mailto:student_name@example.com');
x_ms_webviewParent = false;
function initVisualizer()
{
    initVisualizerAPI();
    initAPI(window);
    x_ms_webviewParent = location.protocol === "ms-local-stream:";
    if (x_ms_webviewParent)
        return;
    iniStorageKeyName();
    var canStoreData = getParameterByName("canStoreData");
    if (canStoreData == "true")
    {
        if (window.parent)
        {
            window.addEventListener('message', receiver, true);
            var stmt = new ADL.XAPIStatement(ADL.XAPIWrapper.Agent, ADL.verbs.resumed);
            stmt.object = new ADL.XAPIStatement.Activity(sStorageKeyName, "course");
            stmt.object.definition.type = "http://adlnet.gov/expapi/activities/course";
            window.parent.postMessage(JSON.stringify(stmt), "*")
        }
        function receiver(e)
        {
            getAllLMSData(e.data);
            launchIt()
        }
    }
    else
    {
        getAllLMSData();
        launchIt()
    }
}
function initWebViewVisualizer(scormData)
{
    restoreServerBuff(scormData);
    launchIt()
}
function initVisualizerAPI()
{
    initScormData();
    API.LMSInitialize = LMSInitialize;
    API.LMSFinish = LMSFinish;
    API.LMSSetValue = LMSSetValue;
    API.LMSGetValue = LMSGetValue;
    API.LMSGetLastError = LMSGetLastError;
    API.LMSGetErrorString = LMSGetErrorString;
    API.LMSCommit = LMSCommit;
    API.LMSGetDiagnostic = LMSGetDiagnostic
}
function initScormData()
{
    var sdNew;
    sdList = new ScormData('rw', '0', 'cmi.comments', 'CMIString4096', '', '', null);
    sdNew = new ScormData('ro', '0', 'cmi.comments_from_lms', 'CMIString4096', '', '', sdList);
    sdNew = new ScormData('ro', '0', 'cmi.core._children', 'CMIString255', '"credit","entry","exit","lesson_location","lesson_mode","lesson_status","score","session_time","student_id","student_name","total_time"', 'credit,entry,exit,lesson_location,lesson_mode,lesson_status,score,session_time,student_id,student_name,total_time', sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.core.credit', 'CMIVocabulary', '"credit":"no-credit"', 'credit', sdNew);
    sdNew.storeLocal = true;
    sdNew = new ScormData('ro', '0', 'cmi.core.entry', 'CMIVocabulary', '"":"ab-initio":"resume"', 'ab-initio', sdNew);
    sdNew.storeLocal = true;
    sdNew = new ScormData('wo', '0', 'cmi.core.exit', 'CMIVocabulary', '"":"logout":"suspend":"time-out"', '', sdNew);
    sdNew = new ScormData('rw', '0', 'cmi.core.lesson_location', 'CMIString255', '', '', sdNew);
    sdNew.storeLocal = true;
    sdNew = new ScormData('ro', '0', 'cmi.core.lesson_mode', 'CMIVocabulary', '"normal":"review":"browse"', 'normal', sdNew);
    sdNew = new ScormData('rw', '0', 'cmi.core.lesson_status', 'CMIVocabulary', '"passed":"completed":"failed":"incomplete":"browsed":"not attempted"', 'not attempted', sdNew);
    sdNew.storeLocal = true;
    sdNew = new ScormData('ro', '0', 'cmi.core.score._children', 'CMIString255', '"max","min","raw"', 'max,min,raw', sdNew);
    sdNew = new ScormData('rw', '0', 'cmi.core.score.max', 'CMIDecimal', '0,100', '', sdNew);
    sdNew = new ScormData('rw', '0', 'cmi.core.score.min', 'CMIDecimal', '0,100', '', sdNew);
    sdNew = new ScormData('rw', '0', 'cmi.core.score.raw', 'CMIDecimal', '0,100', '', sdNew);
    sdNew = new ScormData('wo', '0', 'cmi.core.session_time', 'CMITimespan', '', '', sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.core.student_id', 'CMIIdentifier', '', 'Joe_Student1', sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.core.student_name', 'CMIString255', '', 'Student, Joe', sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.core.total_time', 'CMITimespan', '', '00:00:00', sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.interactions._children', 'CMIString255', '"id","objectives","time","type","correct_responses","weighting","student_response","result","latency"', 'id,objectives,time,type,correct_responses,weighting,student_response,result,latency', sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.interactions._count', 'CMIInteger', '', 0, sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.launch_data', 'CMIString4096', '', '', sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.objectives._children', 'CMIString255', '"id","score","status"', 'id,score,status', sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.objectives._count', 'CMIInteger', '', 0, sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.student_data._children', 'CMIString255', '"mastery_score","max_time_allowed","time_limit_action"', '', sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.student_data.mastery_score', 'CMIDecimal', '', '', sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.student_data.max_time_allowed', 'CMITimespan', '', '', sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.student_data.time_limit_action', 'CMIVocabulary', '"exit,message":"exit,no message":"continue,message":"continue,no message"', 'continue,no message', sdNew);
    sdNew = new ScormData('ro', '0', 'cmi.student_preference._children', 'CMIString255', '"audio","language","speed","text"', 'audio,language,speed,text', sdNew);
    sdNew = new ScormData('rw', '0', 'cmi.student_preference.audio', 'CMIInteger', '-9999,100', '0', sdNew);
    sdNew = new ScormData('rw', '0', 'cmi.student_preference.language', 'CMIString255', '', '', sdNew);
    sdNew = new ScormData('rw', '0', 'cmi.student_preference.speed', 'CMIInteger', '-100,100', '0', sdNew);
    sdNew = new ScormData('rw', '0', 'cmi.student_preference.text', 'CMIInteger', '', '0', sdNew);
    sdNew = new ScormData('rw', '0', 'cmi.suspend_data', 'CMIString4096', '-1,1', '', sdNew);
    sdNew.storeLocal = true
}
function ScormData(mode, lastError, name, type, range, value, prev)
{
    this.mode = mode;
    this.lastError = lastError;
    this.name = name;
    this.type = type;
    this.range = range;
    this.value = value;
    this.storeLocal = false;
    if (prev == null)
    {
        this.next = null
    }
    else
    {
        this.next = prev.next;
        prev.next = this
    }
    this.setValue = setValue;
    this.insertAlpha = insertAlpha
}
var storage = (function()
    {
        var lStorage,
            fail,
            uid;
        try
        {
            uid = new Date;
            (lStorage = window.localStorage).setItem(uid, uid);
            fail = lStorage.getItem(uid) != uid;
            lStorage.removeItem(uid);
            fail && (lStorage = false)
        }
        catch(e) {}
        return {
                localStorage: lStorage, setItem: function(name, value)
                    {
                        if (lStorage)
                        {
                            lStorage.setItem(name, value)
                        }
                        else
                        {
                            var exdate = new Date(2020, 0, 1);
                            var c_value = escape(value) + "; expires=" + exdate.toUTCString();
                            document.cookie = name + "=" + c_value
                        }
                    }, getItem: function(name)
                    {
                        if (lStorage)
                        {
                            return lStorage.getItem(name)
                        }
                        else
                        {
                            var i,
                                x,
                                y,
                                ARRcookies = document.cookie.split(";");
                            for (i = 0; i < ARRcookies.length; i++)
                            {
                                x = ARRcookies[i].substr(0, ARRcookies[i].indexOf("="));
                                y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
                                x = x.replace(/^\s+|\s+$/g, "");
                                if (x == name)
                                {
                                    return unescape(y)
                                }
                            }
                        }
                    }
            }
    }());
function iniStorageKeyName()
{
    var oXml = getXmlDocument("version.xml");
    var aVersionXml = oXml.getElementsByTagName("version");
    if (aVersionXml.length)
    {
        var sCourseId = aVersionXml[0].getAttribute("id");
        if (sCourseId)
        {
            sStorageKeyName += sCourseId
        }
    }
}
function getAllLMSData(sCallerScormData)
{
    var lmsSdDate = 0;
    if (lmsAPI != null)
    {
        if (lmsAPI.LMSInitialize("") == "true")
        {
            for (var sdCur = sdList; sdCur != null; sdCur = sdCur.next)
            {
                if (sdCur.mode == 'ro' || sdCur.mode == 'rw')
                {
                    getLMSData(sdCur);
                    if (sdCur.name == "cmi.suspend_data")
                    {
                        lmsSdDate = getSuspendDataDate(sdCur.value)
                    }
                }
            }
            getObjectives()
        }
    }
    else
    {}
    try
    {
        var sScormD = sCallerScormData;
        if (!sScormD)
            sScormD = storage.getItem(sStorageKeyName);
        if (sScormD)
        {
            var aScormData = JSON.parse(sScormD);
            var localSdDate = 0;
            for (var i = 0; i < aScormData.length; i = i + 2)
            {
                if (aScormData[i] == "cmi.suspend_data")
                {
                    localSdDate = getSuspendDataDate(aScormData[i + 1]);
                    break
                }
            }
            if (localSdDate > lmsSdDate)
            {
                restoreBuff(aScormData)
            }
        }
    }
    catch(e) {}
}
function getSuspendDataDate(suspend_data)
{
    if (!suspend_data)
        return 0;
    var aParts = suspend_data.split("{{");
    for (var i = 0; i < aParts.length; i = i + 2)
    {
        if (aParts[i] == "DATE")
        {
            return aParts[i + 1] + 0
        }
    }
}
function getLMSData(sdCur)
{
    var sData = lmsAPI.LMSGetValue(sdCur.name);
    sdCur.lastError = lmsAPI.LMSGetLastError();
    sdCur.setValue(sData);
    sLastError = sdCur.lastError
}
function locateData(sName)
{
    for (var sdCur = sdList; sdCur != null; sdCur = sdCur.next)
    {
        if (sdCur.name == sName)
            return sdCur
    }
    return null
}
function setValue(sData)
{
    var aParts,
        sVal;
    sData += "";
    this.value = sData;
    this.lastError = '0';
    if (this.type == 'CMIString4096')
    {
        if (sData.length > 4096)
            this.lastError = '405'
    }
    else if (this.type == 'CMIString255')
    {
        if (sData.length > 255)
            this.lastError = '405'
    }
    else if (this.type == 'CMIIdentifier')
    {
        if (sData.length > 255)
            this.lastError = '405';
        if (sData.indexOf(' ') >= 0)
            this.lastError = '405'
    }
    else if (this.type == 'CMITimespan' || this.type == 'CMITime')
    {
        if (sData == "")
            return;
        aParts = sData.split(':');
        if (aParts.length < 3 || aParts[0].length < 2 || aParts[1].length < 2 || aParts[2].length < 2 || isNaN(aParts[0]) == true || isNaN(aParts[1]) == true || isNaN(aParts[2]) == true)
        {
            this.lastError = '205'
        }
        else
        {
            aParts = aParts[2].split('.');
            if (aParts.length > 1)
            {
                if (aParts[1].length > 2)
                {
                    this.lastError = '205'
                }
            }
        }
    }
    else if (this.type == 'CMIInteger')
    {
        if (sData == "")
            return;
        if (isNaN(sData) == true || sData != Math.floor(sData))
            this.lastError = '405'
    }
    else if (this.type == 'CMIDecimal')
    {
        if (sData == "")
            return;
        if (isNaN(sData) == true)
            this.lastError = '405'
    }
    else if (this.type == 'CMIVocabulary')
    {
        aParts = this.range.split(':');
        for (i = 0; i < aParts.length; i++)
        {
            if (aParts[i] == '""')
                sVal = '';
            else
                sVal = aParts[i].substring(1, aParts[i].length - 1);
            if (sVal == sData)
                return;
            if (sVal == 'CMIDecimal' && isNaN(sData) == false)
                return
        }
        this.lastError = '405'
    }
}
function insertAlpha(sdTheList)
{
    if (sdTheList == null)
    {
        return this
    }
    if (this.name < sdTheList.name)
    {
        this.next = sdTheList;
        return this
    }
    var sdNext;
    for (var sdCur = sdTheList; sdCur != null; sdCur = sdCur.next)
    {
        if (sdCur.next == null)
        {
            sdCur.next = this;
            return sdTheList
        }
        sdNext = sdCur.next;
        if (this.name < sdNext.name)
        {
            this.next = sdNext;
            sdCur.next = this;
            return sdTheList
        }
    }
}
function getObjectives()
{
    var sChildren = lmsAPI.LMSGetValue('cmi.objectives._children');
    var sError = lmsAPI.LMSGetLastError();
    if (sError != "0")
        return;
    var nCount = lmsAPI.LMSGetValue('cmi.objectives._count') - 0;
    sError = lmsAPI.LMSGetLastError();
    if (sError != "0")
        return;
    var bId = sChildren.indexOf('id');
    var bScore = sChildren.indexOf('score');
    var bStatus = sChildren.indexOf('status');
    var sdNew = locateData(sName);
    var sName,
        sValue,
        bMin,
        bMax,
        bRaw;
    for (var i = 0; i < nCount; i++)
    {
        if (bId)
        {
            sName = 'cmi.objectives.' + i + '.id';
            sdNew = new ScormData('rw', '0', sName, 'CMIIdentifier', '', '', sdNew);
            getLMSData(sdNew)
        }
        if (bScore)
        {
            sName = 'cmi.objectives.' + i + '.score_children';
            sValue = lmsAPI.LMSGetValue(sName);
            sError = lmsAPI.LMSGetLastError();
            if (sError != '0')
            {
                bMin = sChildren.indexOf('min');
                bMax = sChildren.indexOf('max');
                bRaw = sChildren.indexOf('raw');
                if (bMin)
                {
                    sName = 'cmi.objectives.' + i + '.score.min';
                    sdNew = new ScormData('rw', '0', sName, 'CMIDecimal', '0,100', '', sdNew);
                    getLMSData(sdNew)
                }
                if (bMax)
                {
                    sName = 'cmi.objectives.' + i + '.score.max';
                    sdNew = new ScormData('rw', '0', sName, 'CMIDecimal', '0,100', '', sdNew);
                    getLMSData(sdNew)
                }
                if (bRaw)
                {
                    sName = 'cmi.objectives.' + i + '.score.raw';
                    sdNew = new ScormData('rw', '0', sName, 'CMIDecimal', '0,100', '', sdNew);
                    getLMSData(sdNew)
                }
            }
        }
        if (bStatus)
        {
            sName = 'cmi.objectives.' + i + '.status';
            sdNew = new ScormData('rw', '0', sName, 'CMIVocabulary', '"passed":"completed":"failed":"incomplete":"browsed":"not attempted"', '', sdNew);
            getLMSData(sdNew)
        }
    }
}
function storeScormDataLocal()
{
    var scormData = [];
    for (var sdCur = sdList; sdCur != null; sdCur = sdCur.next)
    {
        if (!storage.localStorage && !sdCur.storeLocal)
            continue;
        scormData.push(sdCur.name);
        scormData.push(sdCur.value)
    }
    var sScormData = JSON.stringify(scormData);
    storage.setItem(sStorageKeyName, sScormData);
    if (sScormData != storage.getItem(sStorageKeyName))
    {
        storage.setItem(sStorageKeyName, "")
    }
}
function restoreBuff(aState)
{
    if (!aState || !aState.length)
        return;
    var sName,
        sValue,
        sdCur,
        sdNew;
    for (var i = 0; i < aState.length; i = i + 2)
    {
        sName = aState[i];
        if (sName == "")
            break;
        sValue = aState[i + 1];
        sdCur = locateData(sName);
        if (sdCur != null)
        {
            sdCur.value = sValue
        }
        else
        {
            sdNew = createScormData(sName);
            if (sdNew != null)
            {
                sdNew.insertAlpha(sdList);
                sdNew.value = sValue
            }
        }
    }
}
function restoreServerBuff(scormData)
{
    var data = JSON.parse(scormData);
    if (!data)
        return;
    if (data.Entry == null)
        return;
    if (data.Comments.indexOf("<learnercomments><comment>") > -1)
    {
        data.Comments = data.Comments.substring(26);
        data.Comments = data.Comments.substring(0, data.Comments.length - 28)
    }
    restoreScormItem("cmi.student_preference.audio", data.Audio);
    restoreScormItem("cmi.comments", data.Comments);
    restoreScormItem("cmi.core.credit", data.Credit);
    restoreScormItem("cmi.core.student_id", data.EmployeeId);
    restoreScormItem("cmi.core.student_name", data.EmployeeName);
    restoreScormItem("cmi.core.entry", data.Entry);
    restoreScormItem("cmi.student_preference.language", data.Language);
    restoreScormItem("cmi.core.lesson_location", data.LessonLocation);
    restoreScormItem("cmi.core.lesson_mode", data.LessonMode);
    restoreScormItem("cmi.core.lesson_status", data.LessonStatus);
    restoreScormItem("cmi.core.score.max", data.MaxScore);
    restoreScormItem("cmi.core.score.min", data.MinScore);
    restoreScormItem("cmi.student_preference.text", data.PrefText);
    restoreScormItem("cmi.core.score.raw", data.RawScore);
    restoreScormItem("cmi.student_preference.speed", data.Speed);
    restoreScormItem("cmi.suspend_data", data.SuspendData);
    restoreScormItem("cmi.core.total_time", data.TotalTime);
    var objectives = data.Objectives.$values ? data.Objectives.$values : data.Objectives;
    var interactions = data.Interactions.$values ? data.Interactions.$values : data.Interactions;
    restoreScormItem("cmi.objectives._count", objectives.length);
    restoreScormItem("cmi.interactions._count", interactions.length);
    for (var i = 0; i < objectives.length; i++)
    {
        var objectiveData = objectives[i].ObjectiveData.$values ? objectives[i].ObjectiveData.$values : objectives[i].ObjectiveData;
        for (j = 0; j < objectiveData.length; j++)
        {
            restoreScormItem(objectiveData[j].Key, objectiveData[j].Value)
        }
    }
    for (var i = 0; i < interactions.length; i++)
    {
        var interactionData = interactions[i].InteractionData.$values ? interactions[i].InteractionData.$values : interactions[i].InteractionData;
        for (j = 0; j < interactionData.length; j++)
        {
            restoreScormItem(interactionData[j].Key, interactionData[j].Value)
        }
        var correctResponses = interactions[i].CorrectResponses.$values ? interactions[i].CorrectResponses.$values : interactions[i].CorrectResponses;
        for (j = 0; j < correctResponses.length; j++)
        {
            restoreScormItem(correctResponses[j].CorrectResponseData[0].Key, correctResponses[j].CorrectResponseData[0].Value)
        }
    }
}
function restoreScormItem(sName, sValue)
{
    var sdCur,
        sdNew;
    sdCur = locateData(sName);
    if (sdCur != null)
    {
        sdCur.value = sValue
    }
    else
    {
        sdNew = createScormData(sName);
        if (sdNew != null)
        {
            sdNew.insertAlpha(sdList);
            sdNew.value = sValue + ""
        }
    }
}
function getScormServerData()
{
    function azureScormCorrectResponses()
    {
        this.CorrectResponseData = []
    }
    function azureScormInteractions()
    {
        this.InteractionData = [];
        this.Objectives = [];
        this.CorrectResponses = []
    }
    function azureScormObjectiveData()
    {
        this.ObjectiveData = []
    }
    function azureKeyValue()
    {
        this.Key = "";
        this.Value = ""
    }
    var azureScorm = {
            Audio: "", Comments: "", Credit: "", EmployeeId: "", EmployeeName: "", Entry: "", InteractionCount: "", Interactions: [], Language: "", LessonLocation: "", LessonMode: "", LessonStatus: "", MaxScore: "", MinScore: "", ObjectiveCount: "", Objectives: [], PrefText: "", RawScore: "", Speed: "", SuspendData: "", TotalTime: ""
        };
    for (var sdCur = sdList; sdCur != null; sdCur = sdCur.next)
    {
        switch (sdCur.name)
        {
            case"cmi.student_preference.audio":
                azureScorm.Audio = sdCur.value;
                break;
            case"cmi.comments":
                azureScorm.Comments = "<learnercomments><comment>" + sdCur.value + "</comment></learnercomments>";
                break;
            case"cmi.core.credit":
                azureScorm.Credit = sdCur.value;
                break;
            case"cmi.core.student_id":
                azureScorm.EmployeeId = sdCur.value;
                break;
            case"cmi.core.student_name":
                azureScorm.EmployeeName = sdCur.value;
                break;
            case"cmi.core.entry":
                azureScorm.Entry = sdCur.value;
                break;
            case"cmi.interactions._count":
                azureScorm.InteractionCount = sdCur.value;
                break;
            case"cmi.student_preference.language":
                azureScorm.Language = sdCur.value;
                break;
            case"cmi.core.lesson_location":
                azureScorm.LessonLocation = sdCur.value;
                break;
            case"cmi.core.lesson_mode":
                azureScorm.LessonMode = sdCur.value;
                break;
            case"cmi.core.lesson_status":
                azureScorm.LessonStatus = sdCur.value;
                break;
            case"cmi.core.score.max":
                azureScorm.MaxScore = sdCur.value;
                break;
            case"cmi.core.score.min":
                azureScorm.MinScore = sdCur.value;
                break;
            case"cmi.objectives._count":
                azureScorm.ObjectiveCount = sdCur.value;
                break;
            case"cmi.student_preference.text":
                azureScorm.PrefText = sdCur.value;
                break;
            case"cmi.core.score.raw":
                azureScorm.RawScore = sdCur.value;
                break;
            case"cmi.student_preference.speed":
                azureScorm.Speed = sdCur.value;
                break;
            case"cmi.suspend_data":
                azureScorm.SuspendData = sdCur.value;
                break;
            case"cmi.core.total_time":
                azureScorm.TotalTime = sdCur.value;
                break
        }
    }
    for (var nn = 0; nn < azureScorm.InteractionCount; nn++)
    {
        azureScorm.Interactions.push(new azureScormInteractions)
    }
    for (var nn = 0; nn < azureScorm.ObjectiveCount; nn++)
    {
        azureScorm.Objectives.push(new azureScormObjectiveData)
    }
    var nCurrentIndex = -1,
        j = 0;
    if (azureScorm.InteractionCount > 0)
    {
        for (var sdCur = sdList; sdCur != null; sdCur = sdCur.next)
        {
            if (sdCur.name.indexOf("cmi.interactions") > -1)
            {
                var aParts = sdCur.name.split(".");
                if (aParts.length < 4 || aParts[4] == '_count' || aParts[4] == '_children')
                    continue;
                var i = aParts[2],
                    key = aParts[3];
                if (i != nCurrentIndex)
                {
                    nCurrentIndex = i;
                    j = 0
                }
                if (key == "correct_responses")
                {
                    if (aParts[5] == "pattern")
                    {
                        azureScorm.Interactions[i].CorrectResponses.push(new azureScormCorrectResponses);
                        azureScorm.Interactions[i].CorrectResponses[0].CorrectResponseData.push(new azureKeyValue);
                        azureScorm.Interactions[i].CorrectResponses[0].CorrectResponseData[0].Key = sdCur.name;
                        azureScorm.Interactions[i].CorrectResponses[0].CorrectResponseData[0].Value = sdCur.value
                    }
                }
                else
                {
                    azureScorm.Interactions[i].InteractionData.push(new azureKeyValue);
                    azureScorm.Interactions[i].InteractionData[j].Key = sdCur.name;
                    azureScorm.Interactions[i].InteractionData[j].Value = sdCur.value;
                    j++
                }
            }
        }
    }
    nCurrentIndex = -1;
    var j = 0;
    if (azureScorm.ObjectiveCount > 0)
    {
        for (var sdCur = sdList; sdCur != null; sdCur = sdCur.next)
        {
            if (sdCur.name.indexOf("cmi.objectives") > -1)
            {
                var aParts = sdCur.name.split(".");
                if (aParts.length < 4 || aParts[4] == '_count' || aParts[4] == '_children')
                {
                    continue
                }
                var i = aParts[2];
                var key = aParts[3];
                if (i != nCurrentIndex)
                {
                    nCurrentIndex = i;
                    j = 0
                }
                azureScorm.Objectives[i].ObjectiveData.push(new azureKeyValue);
                azureScorm.Objectives[i].ObjectiveData[j].Key = sdCur.name;
                azureScorm.Objectives[i].ObjectiveData[j].Value = sdCur.value;
                j++
            }
        }
    }
    return JSON.stringify(azureScorm)
}
var logWindow = null;
function showLog(sData)
{
    if (_debug)
    {
        if (logWindow == null)
        {
            logWindow = open('', 'logWindow', 'width=600,height=600,scrollbars=yes,resizable=yes')
        }
        if (logWindow && !logWindow.closed)
            logWindow.document.write(sData + '</br />')
    }
}
function launchIt()
{
    document.getElementById("SCO").src = "Launch.htm";
    removeLoading()
}
function removeLoading()
{
    var loading = document.getElementById("divLoading");
    if (loading && loading.parentNode)
        loading.parentNode.removeChild(loading);
    var loadingStyle = document.getElementById("styleLoading");
    if (loadingStyle)
        loadingStyle.style.display = "none"
}
function getParameterByName(name)
{
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "))
}
function getXmlDocument(sFile)
{
    var xmlHttp,
        oXML;
    try
    {
        xmlHttp = new XMLHttpRequest;
        xmlHttp.open("GET", sFile, false);
        xmlHttp.send(null);
        oXML = xmlHttp.responseXML
    }
    catch(e)
    {
        xmlHttp = getXMLObject();
        xmlHttp.async = false;
        xmlHttp.load(sFile);
        oXML = xmlHttp
    }
    return oXML
}
function getXMLObject()
{
    var aVersions = new Array("Msxml2.DOMDocument.6.0", "Msxml2.DOMDocument.3.0");
    for (var i = 0; i < aVersions.length; i++)
    {
        try
        {
            var oXML = new ActiveXObject(aVersions[i]);
            return oXML
        }
        catch(e) {}
    }
    return null
}
function finishSession(e)
{
    var sdStatus,
        sdRaw,
        sdMastery,
        sdExit,
        sdEntry,
        sdSession,
        sdTotal;
    if (!bFinish)
    {
        bFinish = true;
        sdStatus = locateData('cmi.core.lesson_status');
        if (sdStatus.value == 'not attempted')
        {
            sdStatus.value = 'completed'
        }
        sdRaw = locateData('cmi.core.score.raw');
        if (sdRaw.value != "")
        {
            sdMastery = locateData('cmi.student_data.mastery_score');
            if (sdMastery.value != '')
            {
                if (parseFloat(sdRaw.value) >= parseFloat(sdMastery.value))
                {
                    sdStatus.value = 'passed'
                }
                else
                {
                    sdStatus.value = 'failed'
                }
            }
        }
        sdExit = locateData('cmi.core.exit');
        sdEntry = locateData('cmi.core.entry');
        if (sdExit.value = 'suspend')
        {
            sdEntry.value = 'resume'
        }
        else
        {
            sdEntry.value = ''
        }
        sdSession = locateData('cmi.core.session_time');
        sdTotal = locateData('cmi.core.total_time');
        sdTotal.value = addTimes(sdTotal.value, sdSession.value)
    }
}
function addTimes(timeTotal, timeSession)
{
    if (timeSession == '')
        return timeTotal;
    var aTotal = timeTotal.split(':');
    var aSession = timeSession.split(':');
    for (var i = 0; i < 3; i++)
    {
        aTotal[i] -= 0;
        aSession[i] -= 0
    }
    var nMin = 0;
    var nHour = 0;
    aTotal[2] += aSession[2];
    if (aTotal[2] > 60)
    {
        nMin = 1;
        aTotal[2] -= 60
    }
    aTotal[1] += aSession[1] + nMin;
    if (aTotal[1] > 60)
    {
        nHour = 1;
        aTotal[1] -= 60
    }
    aTotal[0] += aSession[0] + nHour;
    for (i = 0; i < 3; i++)
    {
        aTotal[i] = Math.floor((aTotal[i] - 0) * 100) / 100;
        aTotal[i] += "";
        if (aTotal[i].length < 2)
            aTotal[i] = '0' + aTotal[i]
    }
    return aTotal.join(':')
}
function findAPI(win)
{
    while ((win.API == null) && (win.parent != null) && (win.parent != win))
    {
        win = win.parent
    }
    return win.API
}
function initAPI(win)
{
    try
    {
        var u = win.parent.location.href
    }
    catch(e)
    {
        lmsAPI = null;
        return
    }
    if (win.parent != null && win != win.parent)
    {
        lmsAPI = findAPI(win.parent)
    }
    else if (win.opener != null)
    {
        lmsAPI = findAPI(win.opener)
    }
    else
    {
        lmsAPI = null
    }
}
function LMSInitialize(value)
{
    bInitialized = true;
    var sData = '';
    if (lmsAPI != null)
    {
        sReturn = lmsAPI.LMSInitialize(value);
        sLastError = lmsAPI.LMSGetLastError()
    }
    else
    {
        sReturn = "true";
        if (value != "")
        {
            sLastError = '201'
        }
        else
        {
            sLastError = '0'
        }
    }
    if (value != "")
    {
        sData += '<br>Your call to LMSInitialize passed an illegal value = (' + value + ')<br>'
    }
    sData += 'Called LMSInitialize(' + value + ') - returned: ' + sReturn;
    showLog(sData);
    return sReturn
}
function LMSFinish(value)
{
    var sReturn;
    var sData = '';
    if (lmsAPI != null)
    {
        sReturn = lmsAPI.LMSFinish(value)
    }
    else
    {
        sReturn = "true";
        if (value != "")
        {
            sLastError = '201'
        }
        else
        {
            sLastError = '0'
        }
        sData = checkInit(sData)
    }
    if (value != "")
    {
        sData += '<br>The call to LMSFinish passed an illegal value = (' + value + ')<br>'
    }
    sData += 'Called LMSFinish(' + value + ') - returned: ' + sReturn;
    showLog(sData);
    return sReturn
}
function checkInit(sData)
{
    if (!bInitialized)
    {
        sData += '<br><b>Error:</b>Illegal Function call before LMSInitialize.<br>';
        sLastError = '301'
    }
    return sData
}
function LMSGetValue(sName)
{
    var sReturn,
        sdCur,
        sPart;
    var sData = '';
    sLastError = '0';
    if (sName.indexOf("cmi.objectives") == 0 && sName.indexOf("score._children") > -1)
    {
        sData += 'Called LMSGetValue(' + sName + ') - returned: "' + 'raw,min,max' + '"';
        showLog(sData);
        return "raw,min,max"
    }
    if (lmsAPI != null)
    {
        sReturn = lmsAPI.LMSGetValue(sName)
    }
    else
    {
        sdCur = locateData(sName);
        sReturn = '';
        if (sdCur != null)
        {
            if (sdCur.mode == 'wo')
            {
                sLastError = '404'
            }
            else
            {
                sReturn = sdCur.value
            }
        }
        else
        {
            if (sName.indexOf('._children') > -1)
            {
                sPart = sName.substring(0, sName.lastIndexOf('._children'));
                sdCur = locateData(sPart);
                if (sdCur != null)
                {
                    sLastError = '202'
                }
            }
            else if (sName.indexOf('._count') > -1)
            {
                sPart = sName.substring(0, sName.lastIndexOf('._count'));
                sdCur = locateData(sPart);
                if (sdCur != null)
                {
                    sLastError = '203'
                }
                else
                {
                    var sdNew = new ScormData('ro', '0', sName, 'CMIInteger', '', 0, null);
                    if (sdNew != null)
                    {
                        sdNew.insertAlpha(sdList)
                    }
                    sReturn = '0'
                }
            }
            if (sLastError == '0')
            {
                sLastError = '201'
            }
        }
        sData = checkInit(sData)
    }
    sData += 'Called LMSGetValue(' + sName + ') - returned: "' + sReturn + '"';
    showLog(sData);
    return sReturn + ''
}
function LMSSetValue(sName, sValue)
{
    var sdCur,
        sdNew,
        sReturn;
    var sData = '';
    if (lmsAPI != null)
    {
        sReturn = lmsAPI.LMSSetValue(sName, sValue);
        if (sReturn == 'true')
        {
            sdCur = locateData(sName);
            if (sdCur != null)
            {
                sdCur.value = sValue
            }
            else
            {
                sdNew = createScormData(sName);
                if (sdNew != null)
                {
                    sdNew.insertAlpha(sdList);
                    sdNew.value = sValue
                }
            }
        }
    }
    else
    {
        sdCur = locateData(sName);
        sReturn = 'false';
        if (sdCur != null)
        {
            if (sdCur.mode == 'wo' || sdCur.mode == 'rw')
            {
                sdCur.setValue(sValue);
                sLastError = sdCur.lastError;
                if (sLastError == '0')
                {
                    sReturn = 'true'
                }
            }
            else
            {
                sLastError = '403'
            }
        }
        else
        {
            sdNew = createScormData(sName);
            if (sdNew != null)
            {
                sdNew.insertAlpha(sdList);
                sdNew.setValue(sValue);
                sLastError = sdNew.lastError;
                sReturn = 'true'
            }
            else
            {
                sLastError = "201"
            }
        }
        sData = checkInit(sData)
    }
    if (!x_ms_webviewParent)
        storeScormDataLocal();
    sData += 'Called LMSSetValue(' + sName + ', "' + sValue + '") - returned: ' + sReturn;
    showLog(sData);
    return sReturn
}
function createScormData(sName)
{
    var nNum,
        sMode,
        sType,
        sdCur,
        nCurCount;
    sLastError = '201';
    var sRange = '';
    if (sName.match(/^cmi\.objectives\.(\d{1,})\./))
    {
        nNum = RegExp.$1 - 0;
        sMode = 'rw';
        if (sName.match(/^cmi\.objectives\.\d{1,}\.id$/))
        {
            sType = 'CMIIdentifier'
        }
        else if (sName.match(/^cmi\.objectives\.\d{1,}\.score\.(min|max|raw)$/))
        {
            sType = 'CMIDecimal';
            sRange = '0,100'
        }
        else if (sName.match(/^cmi\.objectives\.\d{1,}\.status$/))
        {
            sType = 'CMIVocabulary';
            sRange = '"passed":"completed":"failed":"incomplete":"browsed":"not attempted"'
        }
        else
        {
            return null
        }
        sdCur = locateData('cmi.objectives._count');
        nCurCount = sdCur.value - 0;
        if (nNum > (nCurCount + 1))
        {
            return null
        }
        if (nNum == nCurCount)
            sdCur.value = (sdCur.value - 0) + 1;
        return new ScormData(sMode, '0', sName, sType, sRange, '', null)
    }
    else if (sName.match(/^cmi\.interactions\.(\d{1,})\./))
    {
        nNum = RegExp.$1 - 0;
        sMode = 'wo';
        if (sName.match(/^cmi\.interactions\.\d{1,}\.id$/))
        {
            sType = 'CMIIdentifier'
        }
        else if (sName.match(/^cmi\.interactions\.\d{1,}\.objectives._count$/))
        {
            sLastError = '403';
            return null
        }
        else if (sName.match(/^cmi\.interactions\.(\d{1,})\.objectives.(\d{1,}).id$/))
        {
            sCount = 'cmi.interactions.' + RegExp.$1 + '.objectives._count';
            sdCur = locateData(sCount);
            if (sdCur == null)
            {
                if (RegExp.$2 == 0)
                {
                    sdCur = new ScormData('r', '0', sCount, 'CMIInteger', '', 1, null);
                    sdCur.insertAlpha(sdList)
                }
                else
                {
                    return null
                }
            }
            else
            {
                nCurCount = sdCur.value - 0;
                if (RegExp.$2 > (nCurCount + 1))
                {
                    return null
                }
                if (nNum == nCurCount)
                    sdCur.value = (sdCur.value - 0) + 1
            }
            sType = 'CMIIdentifier'
        }
        else if (sName.match(/^cmi\.interactions\.\d{1,}\.time$/))
        {
            sType = 'CMITime'
        }
        else if (sName.match(/^cmi\.interactions\.\d{1,}\.type$/))
        {
            sType = 'CMIVocabulary';
            sRange = '"true-false":"choice":"fill-in":"matching":"performance":"likert":"sequencing":"numeric"'
        }
        else if (sName.match(/^cmi\.interactions\.\d{1,}\.correct_responses._count$/))
        {
            sLastError = '403';
            return null
        }
        else if (sName.match(/^cmi\.interactions\.(\d{1,})\.correct_responses.(\d{1,}).pattern$/))
        {
            sCount = 'cmi.interactions.' + RegExp.$1 + '.correct_responses._count';
            sdCur = locateData(sCount);
            if (sdCur == null)
            {
                if (RegExp.$2 == 0)
                {
                    sdCur = new ScormData('r', '0', sCount, 'CMIInteger', '', '1', null);
                    sdCur.insertAlpha(sdList)
                }
                else
                {
                    return null
                }
            }
            else
            {
                nCurCount = sdCur.value - 0;
                if (RegExp.$2 > (nCurCount + 1))
                {
                    return null
                }
                if (nNum == nCurCount)
                    sdCur.value = (sdCur.value - 0) + 1
            }
            sType = 'CMIFeedback'
        }
        else if (sName.match(/^cmi\.interactions\.\d{1,}\.weighting$/))
        {
            sType = 'CMIDecimal'
        }
        else if (sName.match(/^cmi\.interactions\.\d{1,}\.student_response$/))
        {
            sType = 'CMIFeedback'
        }
        else if (sName.match(/^cmi\.interactions\.\d{1,}\.result$/))
        {
            sType = 'CMIVocabulary';
            sRange = '"correct":"wrong":"unanticipated":"neutral":"CMIDecimal"'
        }
        else if (sName.match(/^cmi\.interactions\.\d{1,}\.latency$/))
        {
            sType = 'CMITimespan'
        }
        else
        {
            return null
        }
        sdCur = locateData('cmi.interactions._count');
        nCurCount = sdCur.value - 0;
        if (nNum > (nCurCount + 1))
        {
            return null
        }
        if (nNum == nCurCount)
            sdCur.value = (sdCur.value - 0) + 1;
        return new ScormData(sMode, '0', sName, sType, sRange, '', null)
    }
    sLastError = '201';
    return null
}
function LMSGetLastError()
{
    var sData = '';
    if (lmsAPI != null)
    {
        sLastError = lmsAPI.LMSGetLastError()
    }
    sData += 'Called LMSGetLastError() - returned: ' + sLastError;
    showLog(sData);
    return sLastError
}
function LMSGetErrorString(value)
{
    var sReturn = "";
    var sData = '';
    if (lmsAPI != null)
    {
        sReturn = lmsAPI.LMSGetErrorString(value)
    }
    else
    {
        if (value == "0")
            sReturn = "No error";
        else if (value == "101")
            sReturn = "General exception";
        else if (value == "201")
            sReturn = "Invalid argument error";
        else if (value == "202")
            sReturn = "Element cannot have children";
        else if (value == "203")
            sReturn = "Element not an array � cannot have count";
        else if (value == "301")
            sReturn = "Not initialized";
        else if (value == "401")
            sReturn = "Not implemented error";
        else if (value == "402")
            sReturn = "Invalid set value, element is a keyword";
        else if (value == "403")
            sReturn = "Element is read only";
        else if (value == "404")
            sReturn = "Element is write only";
        else if (value == "405")
            sReturn = "Incorrect Data Type";
        else
        {
            sData += '<br>Illegal value passed to LMSGetErrorString, value = (' + value + ')<br>'
        }
    }
    sData += 'Called LMSGetErrorString(' + value + ') - returned: ' + sReturn;
    showLog(sData);
    return sReturn
}
function LMSCommit(value)
{
    var sReturn;
    var sData = '';
    if (lmsAPI != null)
    {
        sReturn = lmsAPI.LMSCommit(value)
    }
    else
    {
        sReturn = 'true'
    }
    if (value != "")
    {
        sData += '<br>LMSCommit passed an illegal value = (' + value + ')<br>'
    }
    sData += 'Called LMSCommit(' + value + ') - returned: ' + sReturn;
    showLog(sData);
    return sReturn
}
function LMSGetDiagnostic(value)
{
    var sData = '';
    if (lmsAPI != null)
    {
        sReturn = lmsAPI.LMSGetDiagnostic(value)
    }
    else
    {
        sReturn = 'REPLY HAZY, TRY AGAIN'
    }
    sData += 'Called LMSGetDiagnostic(' + value + ') - returned: ' + sReturn;
    showLog(sData);
    return sReturn
}
if (typeof(window.external) != 'undefined' && typeof(window.external.notify) != 'undefined')
{
    function sendDataToApp(cmd)
    {
        try
        {
            window.location.replace("version.xml")
        }
        catch(e) {}
    }
}
