/*
Plugin Name: AMPPlayer
Description: "This plugin is the extension for azure media player with lot of custom additions to allow customizations based on user interest.
Version: 1.0
Author: Praveen Battula
*/
var AMPPlayer = (function () {
    this.ampPlayer = null;
    var options = {};
    var position = 0;
    var playedTime = 0;
    var duration = 0;
    var timerInterval = null;
    var cookieSaveInterval = null;
    var controlsLoaded = false;
    var selectedQuality = "Medium";
    var selectedSpeed = "normal";
    var captionSearchHTMLTemplate = '<input tabindex="0" id="captions-search-input" class="outline-enabled-control captions-search-input" placeholder="search" type="text" role="textbox" aria-live="polite" style="width:100px"></input><div id="captions-search-results" class="captions-search-results"></div>';
    var searchResultHTMLTemplate = "<tr align='left' class=\"vjs-menu-item outline-enabled-control trSearchResult\" seekLength={{captionStartTime}}><td>{{captionSecInTimeFormat}}</td><td><div title=\"{{captionText}}\" class='captionSearchText'>{{captionText}}</div></td></tr>";
    var annotationHTMLTemplate = '<div class="pf-annotation-area" id="annotationArea"></div>';
    var credibilityPercetageMarkHTMLTemplate = "<div class='pf-credibility-percentage-button' style='left:{{chapterLeftPos}}%;' title='You have to watch till this mark to get the credits.'>&nbsp;&nbsp;</div>";
    var playbackSpeedHTMLTemplate = '<div class="pf-playbackspeed-control"></div>';
    var skipbackwardbutton = '<div class="vjs-control-content"><span class="vjs-control-text">Skip Backward 15 Seconds</span></div>';
    var isPaused = true;
    var isSeeking = false;
    var skipDoubleClickEvent = ["vjs-control-bar", "vjs-control", "captions-search-input"]; //For double click full screen.
    var captionCues = [];
    var playerIntervals = [];
    var playerStartPosition = 0;
    var cookieSaveSpanInSecs = 5;
    var videoCookieName = null;
    var videoCookieValue = { p: 0, m: 0, i: [] }; //position, max position, unique intervals.
    var playerCookieName = null;
    var playerCookieValue = { volume: 0, captions: false };
    var showTTMLCaptions = false;

    AMPPlayer = function (playerOptions) {
        var defaults = {
            //defines player behavior
            settings: {
                autoPlay: false,
                techOrder: ["azureHtml5JS", "flashSS", "silverlightSS", "html5"],
                poster: "",
                width: 600,
                height: 400,
                customPlayerSettings: {},
                heuristicProfile: "",
                logo: { enabled: true },
                skinConfig: {},
                volume: 0.5
            },
            //defines player controls
            controls: {
                show: true,
                progress: true,
                captions: {
                    show: true,
                    search: false,
                    toggleCaption: true,
                    showDefault: false
                },
                fullscreen: true,
                chapters: true,
                volume: true,
                quality: true,
                moreOptions: true,
                audioTracks: true,
                seek: true,
                playback: true,
                completionMark: true,
                skipbackward: false
            },
            //other player configuration
            placeHolder: "azuremediaplayer",
            videoID: "",
            source: [],
            tracks: [], //For VTT files
            ttmlCaptions: [], //For TTML files
            chapters: [],
            annotations: [],
            resumeLocation: 0,
            maxLocation: 0,
            storage: "local",
            events: {},
            logging: {
                player: false,
                custom: false
            },
            cookieExpiresInMinutes: 7 * 24 * 60,
            minCharCountToSearchCaptions: 3,
            enableDoubleClickForFullscreen: true,
            credibilityCompletePercentage: 80,
            streamType: "azure"
        };
        if (playerOptions)
            options = extendDefaults(defaults, playerOptions);
		controlsLoaded = false;
    }

    // Public Methods    
    AMPPlayer.prototype.render = function () {
        if (options.placeHolder)
            playerCookieName = options.placeHolder + "_" + "player";
        if (options.videoID)
            videoCookieName = options.videoID + "_" + "video";

        buildPlayer();
        initializeEvents();
    }
    AMPPlayer.prototype.dispose = function () {
        playerDispose();
    }
    AMPPlayer.prototype.playbackBitrate = function () {
        return ampPlayer.currentPlaybackBitrate();
    }
    AMPPlayer.prototype.downloadBitrate = function () {
        return ampPlayer.currentDownloadBitrate();
    }
    AMPPlayer.prototype.getPosition = function () {
        return ampPlayer.currentTime();
    }
    AMPPlayer.prototype.setPosition = function (secs) {
        seekToPosition(secs);
    }
    AMPPlayer.prototype.setMaxPosition = function (currentPosition, maxPosition) {
        var data = getVideoCookie();
        if (!data)
            data = videoCookieValue;
        data.m = maxPosition && !isNaN(maxPosition) ? maxPosition : 0;
        data.p = currentPosition && !isNaN(currentPosition) ? currentPosition : 0;
        setCookie(videoCookieName, JSON.stringify(data));
    }
    AMPPlayer.prototype.getWatchedTime = function () {
        return getUniqueTimeWatched();
    }
    AMPPlayer.prototype.getVideoDuration = function () {
        return ampPlayer.duration();
    }
    AMPPlayer.prototype.ended = function () {
        return ampPlayer.ended();
    }
    AMPPlayer.prototype.play = function () {
        ampPlayer.play();
    }
    AMPPlayer.prototype.pause = function () {
        ampPlayer.pause();
    }
    AMPPlayer.prototype.setWidth = function (width) {
        ampPlayer.width(width);
    }
    AMPPlayer.prototype.setHeight = function (height) {
        ampPlayer.height(height);
    }
    AMPPlayer.prototype.getWidth = function () {
        return ampPlayer.videoWidth();
    }
    AMPPlayer.prototype.getHeight = function () {
        return ampPlayer.videoHeight();
    }
    AMPPlayer.prototype.getPlayerState = function () {
        if (ampPlayer.paused())
            return "Pause";
        else if (ampPlayer.seeking())
            return "Seeking";
        else if (ampPlayer.ended())
            return "Ended";
        else if (ampPlayer.isFullscreen())
            return "Fullscreen";
    }

    // Private Methods
    function buildPlayer() {
        var playerOptions = {
            autoplay: options.settings.autoPlay,
            techOrder: options.settings.techOrder,
            "nativeControlsForTouch": false,
            controls: options.controls.show,
            width: options.settings.width,
            height: options.settings.height,
            poster: options.settings.poster,
            customPlayerSettings: options.settings.customPlayerSettings,
            heuristicProfile: options.settings.heuristicProfile,
            logo: options.settings.logo,
            skinConfig: options.skinConfig,
            plugins: options.plugins
        };
        if (options.logging.player)
            playerOptions.traceConfig = {
                TraceTargets: [{ target: 'console' }],
                maxLogLevel: 3
            };

        this.ampPlayer = amp(options.placeHolder, playerOptions);
        amp.options.flashSS.swf = "https://amp.azure.net/libs/amp/2.0.0/techs/StrobeMediaPlayback.2.0.swf";
        amp.options.flashSS.plugin = "https://amp.azure.net/libs/amp/2.0.0/techs/MSAdaptiveStreamingPlugin-osmf2.0.swf";
        amp.options.silverlightSS.xap = "https://amp.azure.net/libs/amp/2.0.0/techs/SmoothStreamingPlayer.xap";

        if (!this.ampPlayer) {
            log("Player is not loaded!");
            return;
        }
        if (options.source && options.source.length === 0) {
            log("Source is not set!");
            return;
        }
        this.ampPlayer.src(options.source, options.tracks);
    }
    function loadControls() {
        controlsLoaded = true;
        if (options.streamType === "channel9" || options.streamType === "mva") {
            renderQualityControl();
        }
        if (options.controls.fullscreen)
            showElement("vjs-fullscreen-control");
        else
            hideElement("vjs-fullscreen-control");
        if (options.controls.volume)
            showElement("vjs-volume-menu-button");
        else
            hideElement("vjs-volume-menu-button");
        if (options.controls.quality)
            showElement("amp-quality-control");
        else
            hideElement("amp-quality-control");
        if (options.controls.progress)
            showElement("vjs-progress-control");
        else
            hideElement("vjs-progress-control");
        if (options.controls.moreOptions)
            showElement("amp-moreoptions-control");
        else
            hideElement("amp-moreoptions-control");
        if (options.controls.subtitles)
            showElement("vjs-subtitles-button");
        else
            hideElement("vjs-subtitles-button");
        if (options.controls.chapters)
            renderChapters();
        if (options.controls.captions.show || options.controls.captions.search || options.controls.captions.toggleCaption) {
            if (options.ttmlCaptions && options.ttmlCaptions.length > 0)
                renderTTMLCaptions();
            else
                renderClosedCaptions();
        }
        else
            hideElement("vjs-captions-button");
        if (options.annotations && options.annotations.length > 0) {
            var textTracks = getElementsByClassName("vjs-text-track-display", "");
            if (textTracks) {
                var div = document.createElement("div");
                div.className = "pf-annotation-cues-container";
                div.innerHTML = annotationHTMLTemplate;
                textTracks.parentNode.appendChild(div);
            }
        }
        if (!options.credibilityCompletePercentage || isNaN(options.credibilityCompletePercentage) ||
            options.credibilityCompletePercentage < 0 || options.credibilityCompletePercentage > 100)
            options.credibilityCompletePercentage = 100;
        if (options.controls.completionMark) {
            var progressControlSlider = getElementsByClassName("vjs-progress-control", "vjs-slider");
            if (progressControlSlider) {
                var div = document.createElement('div');
                div.innerHTML = replaceAll(credibilityPercetageMarkHTMLTemplate, { chapterLeftPos: (options.credibilityCompletePercentage === 100 ? 99.5 : options.credibilityCompletePercentage) });
                progressControlSlider.appendChild(div);
            }
        }
        if (options.controls.audioTracks) {
            if (this.ampPlayer.currentAudioStreamList()) {
                var audioStreams = this.ampPlayer.currentAudioStreamList().streams;
                if (audioStreams && audioStreams.length > 1)
                    showElement("amp-audiotracks-control");
                else
                    hideElement("amp-audiotracks-control");
            }
        }
        else
            hideElement("amp-audiotracks-control");
        if (options.controls.playback)
            renderPlaybackSpeed();
        if (!options.controls.seek)
            disableProgressControl();
        if (options.controls.skipbackward) {
            var playButton = getElementsByClassName("amp-controlbaricons-left", "vjs-play-control");
            if (playButton) {
                var div = document.createElement("div");
                div.className = "vjs-control amp-skipbackwardbutton";
                div.innerHTML = skipbackwardbutton;
                div.setAttribute("role", "button");
                div.setAttribute("tabindex", "0");
                playButton.parentNode.appendChild(div);
                registerEvent(div,"click",skipbackward15Sec.bind(this))
            }
        }
    }
    function skipbackward15Sec(e) {
        seekToPosition(ampPlayer.currentTime() - 15);
    }
    function loadPlayerDefaults() {
        duration = this.ampPlayer.duration();
        var resumeLocation = !isNaN(options.resumeLocation) ? options.resumeLocation : -1;
        var maxLocation = (options.maxLocation > 0 && resumeLocation < options.maxLocation) ? options.maxLocation : resumeLocation;
        var intervals = [];
        var data = getVideoCookie();
        if (data) {
            if (resumeLocation > -1) {
                if (resumeLocation > data.p)
                    data.p = resumeLocation;
                else
                    resumeLocation = data.p;
                if (maxLocation > data.m)
                    data.m = maxLocation;
                else
                    maxLocation = data.m;
                intervals.push([0, maxLocation]);
                data.i = intervals;
                setCookie(videoCookieName, JSON.stringify(data));
            }
            else {
                if (data.p && data.p > 0)
                    resumeLocation = data.p;
                if (data.m && data.m > 0)
                    maxLocation = data.m;
                if (data.i)
                    intervals = data.i;
            }
        }
        else {
            if (resumeLocation > -1) {
                data = videoCookieValue;
                data.p = resumeLocation;
                data.m = maxLocation;
                intervals.push([0, maxLocation]);
                data.i = intervals;
                setCookie(videoCookieName, JSON.stringify(data));
            }
        }
       console.log("AMP Resume Location:" + resumeLocation);
        console.log("AMP Max Location" + duration);
        if (resumeLocation > 0 && resumeLocation < parseInt(duration, 10)) {
            playerStartPosition = resumeLocation;
            seekToPosition(resumeLocation);
        }
        if (intervals && intervals.length > 0) {
            playerIntervals = intervals;
            getUniqueTimeWatched();
        }
        var playerCookieVal = getCookie(playerCookieName);
        if (playerCookieVal) {
            var playerData = JSON.parse(playerCookieVal);
            if (playerData)
                this.ampPlayer.volume(playerData.volume);
            else if (options.settings.volume > 0)
                this.ampPlayer.volume(options.settings.volume);
        }
        else if (options.settings.volume > 0)
            this.ampPlayer.volume(options.settings.volume);

        if (!controlsLoaded)
            loadControls();
        else
            renderQualityControl();
    }
    function initializeEvents() {
        this.ampPlayer.addEventListener(amp.eventName.loadeddata, playerLoadedData.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.play, playerPlay.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.volumechange, playerVolumeChange.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.timeupdate, playerTimeUpdate.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.seeking, playerSeeking.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.pause, playerPause.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.loadedmetadata, playerLoadedMetadata);
        this.ampPlayer.addEventListener(amp.eventName.waiting, playerWaiting.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.playing, playerPlaying.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.seeked, playerSeeked.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.ended, playerEnded.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.error, playerError.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.durationchange, playerDurationChange.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.fullscreenchange, playerFullscreenChange.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.canplaythrough, playerCanPlayThrough.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.loadstart, playerLoadStart.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.downloadbitratechanged, playerDownloadBitrateChanged.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.playbackbitratechanged, playerPlaybackBitrateChanged.bind(this));
        this.ampPlayer.addEventListener(amp.eventName.sourceset, playerSourceSet.bind(this));
		
        if (options.controls.fullscreen && options.enableDoubleClickForFullscreen) {
            this.ampPlayer.addEventListener('dblclick', toggleFullscreen.bind(this));
        }
        //window.onbeforeunload = options.events.playerDisposeEvent ? options.events.playerDisposeEvent : playerDispose;
        setIntervals();
    }
    function setIntervals() {
        // disable
        return;
        if (!timerInterval) {
            timerInterval = setInterval(function () {
                playerCurrentPosition = this.ampPlayer.currentTime();
                disableProgressControl();
            }, 1000);
        }
        if (!cookieSaveInterval) {
            cookieSaveInterval = setInterval(function () {
                if (!isPaused)
                    setVideoCookie();
            }, 1000);
        }
    }
    function renderQualityControl() {
        // disable
        return;
        var qualityControl = getElementsByClassName("amp-controlbaricons-right", "amp-quality-control");
        if (qualityControl) {
            qualityControl.className = qualityControl.className.replace(/\bvjs-hidden\b/, '');
            qualityControl.className = qualityControl.className + " quality-4 amp-custom-quality-control";
            var qualityControlMenu = getElementsByClassName("amp-quality-control", "vjs-menu-content");
            if (qualityControlMenu) {
                var li = document.createElement("li");
                li.className = "amp-menu-header";
                li.appendChild(document.createTextNode("Quality"));
                qualityControlMenu.appendChild(li);
                var quality = ["High", "Medium", "Low"];
                for (var i = 0; i < quality.length; i++) {
                    var li = document.createElement("li");
                    li.className = "vjs-menu-item amp-menu-item " + (quality[i] === selectedQuality ? "vjs-selected" : "");
                    li.appendChild(document.createTextNode(quality[i]));
                    registerEvent(li, "click", changePlayerQuality.bind(this));
                    qualityControlMenu.appendChild(li);
                }
            }
        }
    }
    function changePlayerQuality(e) {
        var node = e.target.parentNode.firstChild;
        while (node && node.nodeType === 1) {
            node.className = node.className.replace("vjs-selected", "");
            node = node.nextElementSibling || node.nextSibling;
        }
        e.target.className = e.target.className + " vjs-selected";
        var text = e.target.innerHTML;
        selectedQuality = text;
        if (options.streamType === "channel9") {
            var source = options.source[0].src.replace("_mid.mp4", "").replace("_high.mp4", "").replace(".mp4", "");
            switch (text) {
                case "Medium": source = source + "_mid.mp4"; break;
                case "High": source = source + "_high.mp4"; break;
                case "Low": source = source + ".mp4"; break;
            }
        }
        else if (options.streamType === "mva") {
            var source = options.source[0].src.replace("650kbps", "").replace("1500kbps", "").replace("3400kbps", "");
            var index = source.indexOf("_H264_") + 6;
            switch (text) {
                case "Medium": source = source.substr(0, index) + "1500kbps" + source.substr(index);
                    break;
                case "High": source = source.substr(0, index) + "3400kbps" + source.substr(index); break;
                case "Low": source = source.substr(0, index) + "650kbps" + source.substr(index); break;
            }
        }
        options.source[0].src = source;
        this.ampPlayer.src(options.source, options.tracks);
        setPlaybackSpeed(selectedSpeed);
        hideElement("vjs-big-play-button");
        var controlBar = getElementsByClassName("vjs-control-bar", "");
        if (controlBar) {
            controlBar.style.visibility = "visible";
            controlBar.style.display = "block";
        }
        this.ampPlayer.play();
    }
    function renderChapters() {
        // disable
        return;
        var progressControlSlider = getElementsByClassName("vjs-progress-control", "vjs-slider");
        if (progressControlSlider) {
            for (var index = 0; index < options.chapters.length; index++) {
                var chapter = options.chapters[index];
                if (chapter) {
                    var secs = convertTimeFormatToSecs(chapter.starttime);
                    if (secs > 0 && secs <= duration) {
                        var chapterLeftPosition = (secs / duration * 100);
                        var div = document.createElement('div');
                        div.className = "pf-chapters-button";
                        div.style.left = chapterLeftPosition + "%";
                        div.setAttribute("title", chapter.title);
                        div.innerHTML = "&nbsp;&nbsp;"
                        progressControlSlider.appendChild(div);
                    }
                }
            }
        }
    }
    function getUniqueTimeWatched() {
        if (playerIntervals) {
            if (playerIntervals.length === 1) {
                playedTime = playerIntervals[0][1] - playerIntervals[0][0];
                return playedTime;
            }
            else if (playerIntervals.length <= 0)
                return 0;
        }
        else
            return 0;

        var stack = [];
        var top = null;
        playerIntervals = playerIntervals.sort();
        stack.push(playerIntervals[0]);
        for (var index = 1; index < playerIntervals.length; index++) {
            top = stack[stack.length - 1];
            if (top[1] < playerIntervals[index][0]) {
                stack.push(playerIntervals[index]);
            }
            else if (top[1] < playerIntervals[index][1]) {
                top[1] = playerIntervals[index][1];
                stack.pop();
                stack.push(top);
            }
        }
        playerIntervals = null;
        playerIntervals = stack;
        playedTime = 0;
        if (playerIntervals) {
            for (var index = 0; index < playerIntervals.length; index++) {
                var ele = playerIntervals[index];
                var secs = ele[1] - ele[0];
                playedTime += secs;
            }
        }
    }
    function renderPlaybackSpeed() {
        // disable
        return;
        var volumeBtn = getElementsByClassName("amp-controlbaricons-right", "");
        if (volumeBtn) {
            var div = document.createElement("div");
            div.className = "amp-playbackspeed-control vjs-menu-button vjs-control";
            div.setAttribute("role", "button");
            div.setAttribute("aria-live", "polite");
            div.onmouseover = function () {
                var menuDiv = getElementsByClassName("amp-playbackspeed-control", "vjs-menu");
                if (menuDiv) {
                    menuDiv.className = menuDiv.className + " vjs-lock-showing";
                }
            }
            div.onmouseout = function () {
                var menuDiv = getElementsByClassName("amp-playbackspeed-control", "vjs-menu");
                if (menuDiv) {
                    menuDiv.className = menuDiv.className.replace(/\bvjs-lock-showing\b/, '');
                }
            }
            div.innerHTML = '<div class="vjs-control-content"><span class="vjs-control-text">Playback Speed</span><div class="vjs-menu"><ul class="vjs-menu-content"></ul></div></div>';
            volumeBtn.insertBefore(div, volumeBtn.firstChild);
            var volumeBtnMenu = getElementsByClassName("amp-playbackspeed-control", "vjs-menu-content");
            if (volumeBtnMenu) {
                var li = document.createElement("li");
                li.className = "amp-menu-header";
                li.appendChild(document.createTextNode("Speed"));
                volumeBtnMenu.appendChild(li);
                var quality = ["2.0", "1.5", "1.25", "normal", "0.5"];
                for (var i = 0; i < quality.length; i++) {
                    var li = document.createElement("li");
                    li.className = "vjs-menu-item amp-menu-item " + (quality[i] === selectedSpeed ? "vjs-selected" : "");
                    li.appendChild(document.createTextNode(quality[i]));
                    registerEvent(li, "click", changePlayerSpeed.bind(this));
                    volumeBtnMenu.appendChild(li);
                }
            }
        }
    }
    function changePlayerSpeed(e) {
        var node = e.target.parentNode.firstChild;
        while (node && node.nodeType === 1) {
            node.className = node.className.replace("vjs-selected", "");
            node = node.nextElementSibling || node.nextSibling;
        }
        e.target.className = e.target.className + " vjs-selected";
        var text = e.target.innerHTML;
        var speed = 1.0;
        if (text === "normal") speed = 1.0;
        else speed = parseFloat(text);
        selectedSpeed = speed;
        setPlaybackSpeed(speed);
    }
    function setPlaybackSpeed(speed) {
        // disable
        return;
        if (isNaN(speed))
            speed = 1.0;
        document.getElementById(options.placeHolder + "_html5_api").playbackRate = parseFloat(speed);
    }
    function renderAnnotations() {
        // disable
        return;
        var currentTime = parseInt(this.ampPlayer.currentTime(), 10);
        for (var i = 0; i < options.annotations.length; i++) {
            var annotation = options.annotations[i];
            if (annotation) {
                if (currentTime >= annotation.start && currentTime <= annotation.end) {
                    if (!annotation.showing) {
                        annotation.showing = true;
                        switch (annotation.type) {
                            case "link":
                                var target = "_blank";
                                var div = document.createElement("div");
                                div.innerHTML = "<a class='linkAnnotation' target=" + (annotation.content.target ? annotation.content.target : target) + " href='" + annotation.content.url + "'>" + annotation.content.display + "</a>";
                                div.className = "annotationContent" + i;
                                div.style.padding = "15px 0px";
                                var annotationArea = getElementsByClassName("pf-annotation-area", "");
                                annotationArea.appendChild(div);
                                var styles = { "width": "100%" };
                                if (annotation.options) {
                                    for (var property in annotation.options) {
                                        if (annotation.options.hasOwnProperty(property) && annotation.options[property]) {
                                            switch (property) {
                                                case "bg": styles["backgroundColor"] = annotation.options[property]; break;
                                                case "mode": if (annotation.options[property] === "dock") {
                                                    var dock = annotation.options["dock"];
                                                    styles["position"] = "absolute";
                                                    if (dock === "top")
                                                        styles["top"] = "0px";
                                                    else if (dock === "left") {
                                                        styles["left"] = "0px";
                                                        styles["width"] = "25%";
                                                        styles["height"] = "100%";
                                                    }
                                                    else if (dock === "right") {
                                                        styles["right"] = "0px";
                                                        styles["width"] = "25%";
                                                        styles["height"] = "100%";
                                                    }
                                                    else if (dock === "center") {
                                                        styles["top"] = "25%";
                                                        styles["left"] = "25%";
                                                        styles["width"] = "50%";
                                                        styles["height"] = "50%";
                                                    }
                                                    else if (dock === "fill") {
                                                        styles["width"] = "100%";
                                                        styles["height"] = "100%";
                                                    }
                                                    else {
                                                        styles["bottom"] = "55px";
                                                    }
                                                }
                                                    break;
                                                case "align":
                                                    styles["textAlign"] = annotation.options[property]; break;
                                                case "color": styles[property] = annotation.options[property];
                                                    var link = getElementsByClassName("annotationContent" + i, "linkAnnotation");
                                                    if (link)
                                                        link.style.color = annotation.options[property];
                                                    break;
                                                case "fontFamily": styles["fontFamily"] = annotation.options[property]; break;
                                                case "fontSize": styles["fontSize"] = annotation.options[property]; break;
                                            }
                                        }
                                    }
                                }
                                var div = getElementsByClassName("annotationContent" + i, "");
                                if (div) {
                                    for (var i in styles)
                                        div.style[i] = styles[i];
                                }
                        }
                    }
                }
                else {
                    if (annotation.showing && (currentTime < annotation.start || currentTime > annotation.end)) {
                        var div = getElementsByClassName("annotationContent" + i, "");
                        if (div)
                            div.parentNode.removeChild(div);
                        annotation.showing = false;
                    }
                }
            }
        }
    }
    function renderClosedCaptions() {
        hideElement("pf-caption-cues-container");
        if (!this.ampPlayer.textTracks_ || (this.ampPlayer.textTracks_.length > 0 && !this.ampPlayer.textTracks_.tracks_)) {
            hideElement("vjs-captions-button");
            return;
        }

        var selectedCaption = getElementsByClassName("vjs-captions-button", "vjs-selected");
        var selectedLanguage = "english";
        if (selectedCaption) {
            selectedLanguage = (selectedCaption.innerText || selectedCaption.textContent);
            if (selectedLanguage === 'captions off')
                selectedLanguage = "english";
        }
        var track = this.ampPlayer.textTracks_.tracks_.filter(function (track_) {
            return track_.kind === "captions" && track_.label === selectedLanguage;
        });
        if (track && track.length === 0)
            return;

        for (var index = 0; index < track[0].cues_.length; index++) {
            var rawcue = track[0].cues_[index];
            var cue = {};
            cue.endTime = rawcue.endTime;
            cue.id = parseInt(rawcue.id, 10);
            cue.position = rawcue.position;
            cue.size = rawcue.size;
            cue.startTime = rawcue.startTime;
            cue.text = rawcue.text;
            captionCues.push(cue);
        }
        renderSearchCaptions();
    }
    function renderSearchCaptions() {
        // disable
        return;
        if (options.controls.captions.search) {
            var captionsButton = getElementsByClassName("vjs-captions-button", "vjs-menu-content");
            if (captionsButton) {
                var li = document.createElement("li");
                li.className = "vjs-menu-item";
                li.setAttribute("role", "text");
                li.setAttribute("aria-live", "polite");
                li.setAttribute("tabindex", "0");
                li.setAttribute("aria-selected", "false");
                li.innerHTML = captionSearchHTMLTemplate;
                captionsButton.appendChild(li);
                registerEvent(document.getElementById('captions-search-input'), "keyup", searchCaptions.bind(this));
            }
        }
        showElement("vjs-captions-button");
    }
    function renderTTMLCaptions() {
        // disable
        return;
        addCustomCaptionControls();
    }
    function setTTMLCaption() {
        var videoPosition = this.ampPlayer.currentTime();
        if (isNaN(videoPosition))
            return;

        var videoCaptions = getElementsByClassName("pf-subtitles-area", "");
        for (var i = 0; i < options.ttmlCaptions.length; i++) {
            var caption = options.ttmlCaptions[i];
            if (videoPosition >= caption.startTime && videoPosition <= caption.endTime) {
                if (!caption.isDisplayed) {
                    caption.isDisplayed = true;
                    if (caption.text.indexOf('<br>') > -1)
                        caption.text = caption.text.replace('<br></br>', '<br>');
                    videoCaptions.innerHTML = caption.text;
                }
            }
            else {
                if (caption.isDisplayed) {
                    videoCaptions.innerHTML = "";
                    caption.isDisplayed = false;
                }
            }
        }
    }
    function addCustomCaptionControls() {
        var textTracks = getElementsByClassName("vjs-text-track-display", "");
        if (textTracks) {
            var div = document.createElement("div");
            div.className = "pf-caption-cues-container";
            div.innerHTML = '<div class="cue pf-subtitles-area" id="subtitleArea"></div>';
            textTracks.parentNode.appendChild(div);
        }
        var captionsButton = getElementsByClassName("vjs-captions-button", "");
        if (captionsButton) {
            captionsButton.className = captionsButton.className.replace(/\bvjs-hidden\b/, '');
            var trackSettings = getElementsByClassName("vjs-texttrack-settings", "");
            if (trackSettings)
                trackSettings.className = trackSettings.className + " vjs-hidden";
            var captionsButtonSelected = getElementsByClassName("vjs-captions-button", "vjs-selected");
            if (captionsButtonSelected) {
                var captionsMenu = getElementsByClassName("vjs-captions-button", "vjs-menu-content");
                if (captionsMenu) {
                    var lis = captionsMenu.getElementsByTagName("li");
                    for (var i = 0; i < lis.length; i++) {
                        if (lis[i].innerHTML === "captions off" || lis[i].innerHTML === "english")
                            lis[i].style.display = "none";
                    }
                }
                var cookieValue = getCookie(playerCookieName);
                if (!cookieValue)
                    cookieValue = playerCookieValue;
                else
                    cookieValue = JSON.parse(cookieValue);
                showTTMLCaptions = cookieValue.captions;
                if (showTTMLCaptions)
                    showElement("pf-subtitles-area");
                else
                    hideElement("pf-subtitles-area");
                if (options.controls.captions.show || options.controls.captions.toggleCaption) {
                    var li = document.createElement("li");
                    li.className = "vjs-menu-item vjs-custom-captions-off" + (!showTTMLCaptions ? " vjs-selected" : "");
                    registerEvent(li, "click", toggleCaptions.bind(this));
                    li.innerHTML = "captions off";
                    captionsMenu.appendChild(li);
                    if (options.controls.captions.showDefault)
                        toggleCaptions();
                }
            }
        }
        renderSearchCaptions();
    }
    function toggleCaptions() {
        var cookieValue = getCookie(playerCookieName);
        if (!cookieValue)
            cookieValue = playerCookieValue;
        else
            cookieValue = JSON.parse(cookieValue);

        var obj = getElementsByClassName("vjs-custom-captions-off", "");
        if (obj.className.indexOf("vjs-selected") > -1) {
            cookieValue.captions = true;
            obj.className = obj.className.replace(/\bvjs-selected\b/, '');
            showElement("pf-subtitles-area");
            showTTMLCaptions = true;
        }
        else {
            obj.className = obj.className + " vjs-selected";
            hideElement("pf-subtitles-area");
            cookieValue.captions = false;
            showTTMLCaptions = false;
        }
        setCookie(playerCookieName, JSON.stringify(cookieValue));
    }
    function searchCaptions() {
        var searchQuery = document.getElementById("captions-search-input").value.toLowerCase();
        var searchResultsContainer = document.getElementById("captions-search-results");
        if (searchQuery.length < options.minCharCountToSearchCaptions) {
            if (searchQuery.length === 0)
                searchResultsContainer.innerHTML = "";
            return;
        }
        var captions = captionCues;
        if (options.ttmlCaptions && options.ttmlCaptions.length > 0)
            captions = options.ttmlCaptions;
        var videoPosition = getVideoCookie('m');
        var results = captions.filter(function (value) {
            return (value.text.toLowerCase().indexOf(searchQuery) != -1);
        });
        var searchResultsHtml = "<table cellspacing='0' class='pf-captions-search-results' id='tableSearchResults'>";
        searchResultsContainer.innerHTML = "";
        if (results && results.length > 0) {
            for (var index = 0; index < results.length; index++) {
                var result = results[index];
                var captionSecInTimeFormat = convertSecToTimeFormat(result.startTime);
                var startTime = result.startTime;
                if (videoPosition < result.startTime && !options.controls.seek)
                    startTime = NaN;
                var replaceKeys = {
                    captionStartTime: startTime,
                    captionSecInTimeFormat: (isNaN(startTime) ? "<span title='Cannot jump to this location.' class='errorMsg'>" +
                        captionSecInTimeFormat + "</span>" : "<span title='click to jump to this location.'>" + captionSecInTimeFormat + "</span>"),
                    captionText: (result.text.replace("<br></br>", " ").replace("<br/>", " ").replace("\"", "&quot;"))
                };
                searchResultsHtml += replaceAll(searchResultHTMLTemplate, replaceKeys);
            }
        }
        else {
            searchResultsHtml += "<tr><td colspan='2'>No results found!</td></tr>";
        }
        searchResultsHtml += "</table>";
        var div = document.createElement("div");
        div.innerHTML = searchResultsHtml;
        searchResultsContainer.appendChild(div);

        var table = document.getElementById("tableSearchResults");
        for (var i = 0, row; row = table.rows[i]; i++) {
            var seekLength = row.getAttribute("seekLength");
            if (seekLength && !isNaN(seekLength))
                registerEvent(row, "click", seekToPosition.bind(this, seekLength));
        }
    }
    function seekToPosition(timeInSecs) {
        if (timeInSecs) {
            var time = timeInSecs;
            if (!isNaN(time))
                this.ampPlayer.currentTime(parseInt(time, 10));
       }
    }
    function disableProgressControl() {
        var placeHolderDOM = document.getElementById(options.placeHolder);
        if (options.controls.seek || !placeHolderDOM ||
            (placeHolderDOM && placeHolderDOM.style.visibility === "hidden"))
            return;
        var progressLeftDiv = getElementsByClassName("vjs-control-bar", "vjs-progress-remaining");
        var videoPosition = getVideoCookie("m");
        var videoProgress = this.ampPlayer.currentTime();
        if (videoPosition) {
            if (progressLeftDiv) {
                if (videoPosition > videoProgress)
                    progressLeftDiv.style.borderLeft = "solid 2px yellow";
                else
                    progressLeftDiv.style.borderLeft = "solid 0px yellow";
            }
            videoProgress = videoPosition;
        }

        var percentageCompletedLeft = ((videoProgress / duration) * 100);
        if (!progressLeftDiv) {
            var progressControlSlider = getElementsByClassName("vjs-progress-control", "");
            if (progressControlSlider) {
                progressLeftDiv = document.createElement("div");
                progressLeftDiv.className = "vjs-progress-remaining";
                progressLeftDiv.setAttribute("title", "You cannot seek forward!");
                progressLeftDiv.innerHTML = "<span class='vjs-control-text'>Progress left</span>";
                progressControlSlider.parentNode.insertBefore(progressLeftDiv, progressControlSlider);
            }
        }

        progressLeftDiv.style.left = (percentageCompletedLeft + "%");
        progressLeftDiv.style.width = ((100 - percentageCompletedLeft) + "%");
    }
    //Util Methods
    function registerEvent(element, eventName, method) {
        element.addEventListener(eventName, method);
    }
    // hides a AMP player button by adding the cjs-hidden class
    function hideElement(className) {
        $("." + className).addClass("vjs-hidden");
    }

    // shows a AMP player button by removing the cjs-hidden class
    function showElement(className) {
        $("." + className).removeClass("vjs-hidden");
    }
    function extendDefaults(source, properties) {
        var property;
        for (property in properties) {
            if (properties.hasOwnProperty(property)) {
                if (properties[property] !== undefined && properties[properties] !== null)
                    source[property] = properties[property];
            }
        }
        return source;
    }
    function toggleFullscreen(e) {
        var source = e.srcElement;
        if (source) {
            if (source) {
                var classes = source.className.split(' ');
                for (var index = 0; index < classes.length; index++)
                    if (skipDoubleClickEvent.indexOf(classes[index]) > -1)
                        return;
            }
            var sourceParent = source.parentNode;
            if (sourceParent) {
                var classes = sourceParent.className.split(' ');
                for (var index = 0; index < classes.length; index++)
                    if (skipDoubleClickEvent.indexOf(classes[index]) > -1)
                        return;
            }
        }
        if (this.ampPlayer.isFullscreen())
            this.ampPlayer.exitFullscreen();
        else
            this.ampPlayer.requestFullscreen();
    }
    function convertTimeFormatToSecs(timeFormat) {
        if (timeFormat) {
            var timeFragments = timeFormat.split(":");
            if (timeFragments.length > 0) {
                switch (timeFragments.length) {
                    case 4: return (parseInt(timeFragments[0], 10) * 60 * 60) + (parseInt(timeFragments[1], 10) * 60) + parseInt(timeFragments[2], 10) + (timeFragments[3] / 100);
                    case 3: return (parseInt(timeFragments[0], 10) * 60 * 60) + (parseInt(timeFragments[1], 10) * 60) + parseInt(timeFragments[2], 10);
                    case 2: return parseInt(timeFragments[0], 10) * 60 + parseInt(timeFragments[1], 10);
                    case 1: return parseInt(timeFragments[0], 10);
                    default: return parseInt(timeFragments[0], 10);
                }
            }
            else
                return parseInt(timeFormat, 10);
        }

        return 0;
    }
    function convertSecToTimeFormat(secs) {
        var pSeconds = parseInt(secs, 10);
        var hours = Math.floor(parseFloat(pSeconds / 3600));
        var minutes = Math.floor((pSeconds - (hours * 3600)) / 60);
        var seconds = pSeconds - (hours * 3600) - (minutes * 60);

        if (hours < 10) { hours = "0" + hours; }
        if (minutes < 10) { minutes = "0" + minutes; }
        if (seconds < 10) { seconds = "0" + seconds; }

        return hours + ':' + minutes + ':' + seconds;
    }
    function setVideoCookie() {
        var currentTime = this.ampPlayer.currentTime();
        if (cookieSaveSpanInSecs > 0 && currentTime > 0) {
            var videoPosition = parseInt(currentTime, 10);
            if ((videoPosition % cookieSaveSpanInSecs) === 0 || ampPlayer.ended()) {
                var videoProgress = 0;
                var data = getVideoCookie();
                if (data) {
                    videoProgress = data.m;
                    if (isNaN(videoProgress)) videoProgress = 0;
                }
                else {
                    data = {};
                }
                data.p = Math.round(playerCurrentPosition);
                if (videoProgress < videoPosition || options.controls.seek) {
                    playerIntervals.push([Math.round(playerStartPosition), Math.round(currentTime)]);
                    data.i = playerIntervals;
                    getUniqueTimeWatched();
                    if (options.controls.seek)
                        data.m = 0;
                    else
                        data.m = Math.round(playerCurrentPosition);
                    playerStartPosition = Math.round(videoPosition);
                }
                setCookie(videoCookieName, JSON.stringify(data));
            }
        }
    }
    function getVideoCookie(key) {
        var videoData = getCookie(videoCookieName);
        if (videoData) {
            var data = JSON.parse(videoData);
            if (data) {
                if (key && data.hasOwnProperty(key))
                    return data[key];
                else
                    return data;
            }
        }
        return null;
    }
    function handleError(err) {
        var errMsg = "";
        if (!err) {
            errMsg = "No error details found!";
        }
        else {
            errMsg = getHighLevelError(err.code);
            errMsg += " code: " + (err.code ? err.code.toString(16) : "");
            if (err.message)
                errMsg += " msg: " + err.message;
        }
        log(errMsg);
        if (options.showErrorOnScreen) {
            var para = document.createElement("p");
            para.className = "err";
            var node = document.createTextNode(errMsg);
            para.appendChild(node);
            var player = document.getElementById(options.parentDiv);
            player.parentNode.appendChild(para);
        }

        return errMsg;
    }
    function getHighLevelError(errorCode) {
        var errorDesc;
        var uiCodeMask = 0xff00000;
        var uiCode = (errorCode & uiCodeMask) >> 20;
        switch (uiCode) {
            case 0:
                errorDesc = "MEDIA_ERR_CUSTOM"
                break;
            case 1:
                errorDesc = "MEDIA_ERR_ABORTED";
                break;
            case 2:
                errorDesc = "MEDIA_ERR_NETWORK";
                break;
            case 3:
                errorDesc = "MEDIA_ERR_DECODE";
                break;
            case 4:
                errorDesc = "MEDIA_ERR_SRC_NOT_SUPPORTED";
                break;
            case 5:
                errorDesc = "MEDIA_ERR_ENCRYPTED";
                break;
            case 6:
                errorDesc = "SRC_PLAYER_MISMATCH";
                break;
            default:
                errorDesc = "MEDIA_ERR_UNKNOWN";
        }

        return errorDesc;
    }
    function setCookie(name, value) {
        var expiredate = new Date();
        var timeToAdd = expiredate.getTime() + (options.cookieExpiresInMinutes * 60 * 1000);
        var timeToDeduct = expiredate.getTime() - (options.cookieExpiresInMinutes * 60 * 1000);
        if (value)
            expiredate.setTime(timeToAdd);
        else
            expiredate.setTime(timeToDeduct);
        var cookieValue = escape(value) + ((options.cookieExpiresInMinutes === null) ? "" : "; expires=" + expiredate.toUTCString());
        document.cookie = name + "=" + cookieValue;
    }
    function getCookie(name) {
        var i, x, y, allCookies = document.cookie.split(";");
        for (i = 0; i < allCookies.length; i++) {
            x = allCookies[i].substr(0, allCookies[i].indexOf("="));
            y = allCookies[i].substr(allCookies[i].indexOf("=") + 1);
            x = x.replace(/^\s+|\s+$/g, "");
            if (x === name)
                return unescape(y);
        }
    }
    function getElementsByClassName(className, childClass) {
        var elements = document.getElementById(options.placeHolder).getElementsByClassName(className);
        var matches = [];

        function traverse(node) {
            if (node && node.childNodes) {
                for (var i = 0; i < node.childNodes.length; i++) {
                    if (node.childNodes[i].childNodes.length > 0) {
                        traverse(node.childNodes[i]);
                    }

                    if (node.childNodes[i].getAttribute && node.childNodes[i].getAttribute('class')) {
                        if (node.childNodes[i].getAttribute('class').split(" ").indexOf(childClass) >= 0) {
                            matches.push(node.childNodes[i]);
                        }
                    }
                }
            }
        }
        if (!childClass)
            return elements && elements.length > 0 ? elements[0] : null;

        if (elements && elements.length > 0) {
            for (var i = 0; i < elements.length; i++)
                traverse(elements[i]);
        }
        return matches && matches.length > 0 ? matches[0] : null;
    }
    function replaceAll(str, keys) {
        for (var i in keys) {
            if (keys.hasOwnProperty(i)) {
                keys["{{" + i + "}}"] = keys[i];
                delete keys[i];
            }
        }
        var rex = new RegExp(Object.keys(keys).join("|"), "gi");

        return str.replace(rex, function (matched) {
            return keys[matched];
        });
    }
    function log(message) {
        if (options.logging.custom) {
            console.log(message);
        }
    }

    //Player Events
    function playerLoadedMetadata() {
        if (options.events.playerLoadedMetadataEvent)
            options.events.playerLoadedMetadataEvent.call();
        log("LoadedMetadata: Player loaded metadata");
    }
    function playerTimeUpdate() {
        if (options.annotations && options.annotations.length > 0)
            renderAnnotations();
        if (options.ttmlCaptions && showTTMLCaptions && options.controls.captions.show)
            setTTMLCaption();
        if (this.ampPlayer.ended()) {
            clearInterval(timerInterval);
            clearInterval(cookieSaveInterval);
            timerInterval = null;
            cookieSaveInterval = null;
        }
        if (options.events.playerTimeUpdateEvent)
            options.events.playerTimeUpdateEvent.call();
    }
    function playerLoadedData() {
        loadPlayerDefaults();
        if (options.events.playerLoadedDataEvent)
            options.events.playerLoadedDataEvent.call();
        log("LoadedData: Player loaded data");
    }
    function playerLoadStart() {
        if (options.events.playerLoadStartEvent)
            options.events.playerLoadStartEvent.call();
        log("LoadStart: Player is loaded and starting");
    }
    function playerCanPlayThrough() {
        if (options.events.playerCanPlayThroughEvent)
            options.events.playerCanPlayThroughEvent.call();
        log("CanPlayThrough: Player can play through");
    }
    function playerWaiting() {
        isPaused = true;
        setPlaybackSpeed(selectedSpeed);
        if (options.events.playerWaitingEvent)
            options.events.playerWaitingEvent.call();
        log("Waiting: Player waiting");
    }
    function playerPlay() {
        isPaused = false;
        //This is for creating intervals once video is replaying
        setIntervals();
        setPlaybackSpeed(selectedSpeed);
        log("Play: Player starts play");

        //if (options.events.playerPlayEvent && !isSeeking)
        if (options.events.playerPlayEvent)
            options.events.playerPlayEvent.call();
        //isSeeking = false;

        //set focus to play button
        $('.vjs-play-control').focus();
    }
    function playerPlaying() {
        isPaused = false;
        if (options.events.playerPlayingEvent)
            options.events.playerPlayingEvent.call();
        log("Playing: Player inprogress playing");
    }
    function playerPause() {
        isPaused = true;
        setPlaybackSpeed(selectedSpeed);
        if (options.events.playerPauseEvent)
            options.events.playerPauseEvent.call();
        log("Pause: Player paused");
    }
    function playerSeeking() {
        isPaused = true;
        //isSeeking = true;
        var position = getVideoCookie("m");
        if (this.ampPlayer.currentTime() > position) {
            seekToPosition(position);
            playerStartPosition = this.ampPlayer.currentTime();
        }
        else
            playerStartPosition = this.ampPlayer.currentTime();

        if (options.events.playerSeekingEvent)
            options.events.playerSeekingEvent.call();

        log("Seeking: Player seeking");
    }
    function playerSeeked() {
        isPaused = false;
        if (options.events.playerSeekedEvent)
            options.events.playerSeekedEvent.call();
        log("Seeked: Player seeked");
    }
    function playerEnded() {
        if (options.events.playerEndedEvent)
            options.events.playerEndedEvent.call();

        log("Player ended");
        playerCurrentPosition = 0;
        this.ampPlayer.currentTime(0);
    }
    function playerVolumeChange() {
        var volume = this.ampPlayer.volume();
        if (this.ampPlayer.muted() && volume > 0)
            volume = 0;
        var playerCookieVal = getCookie(playerCookieName);
        if (playerCookieVal)
            playerCookieValue = JSON.parse(playerCookieVal);
        else
            playerCookieValue = {};

        playerCookieValue.volume = volume;
        setCookie(playerCookieName, JSON.stringify(playerCookieValue));
        if (options.events.playerVolumeChangeEvent)
            options.events.playerVolumeChangeEvent.call();
        log("VolumeChange: Player volume changed:" + this.ampPlayer.volume());
    }
    function playerFullscreenChange() {
        if (options.events.playerFullscreenChangeEvent)
            options.events.playerFullscreenChangeEvent.call();
        log("FullscreenChange: Player full screen changed.");
    }
    function playerError(err) {
        handleError(err);
        if (options.events.playerErrorEvent)
            options.events.playerErrorEvent.call(err);
        log("Error: Player error");
    }
    function playerDownloadBitrateChanged() {
        if (options.events.playerDownloadBitrateChangedEvent)
            options.events.playerDownloadBitrateChangedEvent.call();
        log("download bitrate changed");
    }
    function playerPlaybackBitrateChanged() {
        if (options.events.playerPlaybackBitrateChangedEvent)
            options.events.playerPlaybackBitrateChangedEvent.call();
        log("playback bitrate changed");
    }
    function playerDurationChange() {
        duration = this.ampPlayer.duration();
        if (options.events.playerDurationChangeEvent)
            options.events.playerDurationChangeEvent.call();
        log("duration changed: " + duration);
    }
    function playerDispose() {
        this.ampPlayer.dispose();
        log("Dispose: Player no more in use. Disposing.");
    }
    function playerSourceSet() {
        //log("Source list event");
    }

    return AMPPlayer;
})();